describe Chacha20 do
  # https://tools.ietf.org/html/draft-strombergson-chacha-test-vectors-00
  describe "128 bit - zeroes" do
    let(:key) { [0] * 16 }
    let(:iv) { [0] * 8 }
    let(:keystream_block_1) {
      %W[
        0x89 0x67 0x09 0x52 0x60 0x83 0x64 0xfd
        0x00 0xb2 0xf9 0x09 0x36 0xf0 0x31 0xc8
        0xe7 0x56 0xe1 0x5d 0xba 0x04 0xb8 0x49
        0x3d 0x00 0x42 0x92 0x59 0xb2 0x0f 0x46
        0xcc 0x04 0xf1 0x11 0x24 0x6b 0x6c 0x2c
        0xe0 0x66 0xbe 0x3b 0xfb 0x32 0xd9 0xaa
        0x0f 0xdd 0xfb 0xc1 0x21 0x23 0xd4 0xb9
        0xe4 0x4f 0x34 0xdc 0xa0 0x5a 0x10 0x3f
      ].map { |x| x.to_i(16) }
    }

    let(:keystream_block_2) {
      %W[
        0x6c 0xd1 0x35 0xc2 0x87 0x8c 0x83 0x2b
        0x58 0x96 0xb1 0x34 0xf6 0x14 0x2a 0x9d
        0x4d 0x8d 0x0d 0x8f 0x10 0x26 0xd2 0x0a
        0x0a 0x81 0x51 0x2c 0xbc 0xe6 0xe9 0x75
        0x8a 0x71 0x43 0xd0 0x21 0x97 0x80 0x22
        0xa3 0x84 0x14 0x1a 0x80 0xce 0xa3 0x06
        0x2f 0x41 0xf6 0x7a 0x75 0x2e 0x66 0xad
        0x34 0x11 0x98 0x4c 0x78 0x7e 0x30 0xad
      ].map { |x| x.to_i(16) }
    }

    it do
      block1 = Chacha20.chacha20_block_16(key, 0, iv)
      block2 = Chacha20.chacha20_block_16(key, 1, iv)
      expect(block1).to eq(keystream_block_1)
      expect(block2).to eq(keystream_block_2)
    end
  end

  describe "128 bit" do
    let(:key) {
      %W[
        0xc4 0x6e 0xc1 0xb1 0x8c 0xe8 0xa8 0x78
        0x72 0x5a 0x37 0xe7 0x80 0xdf 0xb7 0x35
      ].map { |x| x.to_i(16) }
    }
    let(:iv) {
      %W[
        0x1a 0xda 0x31 0xd5 0xcf 0x68 0x82 0x21
      ].map { |x| x.to_i(16) }
    }
    let(:keystream_block_1) {
      %W[
        0x82 0x6a 0xbd 0xd8 0x44 0x60 0xe2 0xe9
        0x34 0x9f 0x0e 0xf4 0xaf 0x5b 0x17 0x9b
        0x42 0x6e 0x4b 0x2d 0x10 0x9a 0x9c 0x5b
        0xb4 0x40 0x00 0xae 0x51 0xbe 0xa9 0x0a
        0x49 0x6b 0xee 0xef 0x62 0xa7 0x68 0x50
        0xff 0x3f 0x04 0x02 0xc4 0xdd 0xc9 0x9f
        0x6d 0xb0 0x7f 0x15 0x1c 0x1c 0x0d 0xfa
        0xc2 0xe5 0x65 0x65 0xd6 0x28 0x96 0x25
      ].map { |x| x.to_i(16) }
    }

    let(:keystream_block_2) {
      %W[
        0x5b 0x23 0x13 0x2e 0x7b 0x46 0x9c 0x7b
        0xfb 0x88 0xfa 0x95 0xd4 0x4c 0xa5 0xae
        0x3e 0x45 0xe8 0x48 0xa4 0x10 0x8e 0x98
        0xba 0xd7 0xa9 0xeb 0x15 0x51 0x27 0x84
        0xa6 0xa9 0xe6 0xe5 0x91 0xdc 0xe6 0x74
        0x12 0x0a 0xca 0xf9 0x04 0x0f 0xf5 0x0f
        0xf3 0xac 0x30 0xcc 0xfb 0x5e 0x14 0x20
        0x4f 0x5e 0x42 0x68 0xb9 0x0a 0x88 0x04
      ].map { |x| x.to_i(16) }
    }

    it do
      block1 = Chacha20.chacha20_block_16(key, 0, iv)
      block2 = Chacha20.chacha20_block_16(key, 1, iv)
      expect(block1).to eq(keystream_block_1)
      expect(block2).to eq(keystream_block_2)
    end
  end

  describe "256 bit" do
    let(:key) {
      %W[
        0xc4 0x6e 0xc1 0xb1 0x8c 0xe8 0xa8 0x78
        0x72 0x5a 0x37 0xe7 0x80 0xdf 0xb7 0x35
        0x1f 0x68 0xed 0x2e 0x19 0x4c 0x79 0xfb
        0xc6 0xae 0xbe 0xe1 0xa6 0x67 0x97 0x5d
      ].map { |x| x.to_i(16) }
    }
    let(:iv) {
      %W[
        0x1a 0xda 0x31 0xd5 0xcf 0x68 0x82 0x21
      ].map { |x| x.to_i(16) }
    }
    let(:keystream_block_1) {
      %W[
        0xf6 0x3a 0x89 0xb7 0x5c 0x22 0x71 0xf9
        0x36 0x88 0x16 0x54 0x2b 0xa5 0x2f 0x06
        0xed 0x49 0x24 0x17 0x92 0x30 0x2b 0x00
        0xb5 0xe8 0xf8 0x0a 0xe9 0xa4 0x73 0xaf
        0xc2 0x5b 0x21 0x8f 0x51 0x9a 0xf0 0xfd
        0xd4 0x06 0x36 0x2e 0x8d 0x69 0xde 0x7f
        0x54 0xc6 0x04 0xa6 0xe0 0x0f 0x35 0x3f
        0x11 0x0f 0x77 0x1b 0xdc 0xa8 0xab 0x92
      ].map { |x| x.to_i(16) }
    }

    let(:keystream_block_2) {
      %W[
        0xe5 0xfb 0xc3 0x4e 0x60 0xa1 0xd9 0xa9
        0xdb 0x17 0x34 0x5b 0x0a 0x40 0x27 0x36
        0x85 0x3b 0xf9 0x10 0xb0 0x60 0xbd 0xf1
        0xf8 0x97 0xb6 0x29 0x0f 0x01 0xd1 0x38
        0xae 0x2c 0x4c 0x90 0x22 0x5b 0xa9 0xea
        0x14 0xd5 0x18 0xf5 0x59 0x29 0xde 0xa0
        0x98 0xca 0x7a 0x6c 0xcf 0xe6 0x12 0x27
        0x05 0x3c 0x84 0xe4 0x9a 0x4a 0x33 0x32
      ].map { |x| x.to_i(16) }
    }

    it do
      block1 = Chacha20.chacha20_block_32(key, 0, iv)
      block2 = Chacha20.chacha20_block_32(key, 1, iv)
      expect(block1).to eq(keystream_block_1)
      expect(block2).to eq(keystream_block_2)
    end
  end
end
